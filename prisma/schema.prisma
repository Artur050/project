datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  password      String
  name          String?
  role          Role     @default(USER)
  templates     Template[]
  forms         Form[]
  comments      Comment[]
  likes         Like[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Template {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  author        User       @relation(fields: [authorId], references: [id])
  authorId      String     @db.ObjectId
  questions     Question[]
  forms         Form[]
  publicFlag        Boolean    @default(false)
  tags          TagToTemplate[]
  comments      Comment[]
  likes         Like[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Question {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  type          QuestionType
  template      Template  @relation(fields: [templateId], references: [id])
  templateId    String    @db.ObjectId
  answers       Answer[]
}

model Form {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  answers       Answer[]
  template      Template  @relation(fields: [templateId], references: [id])
  templateId    String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
}

model Answer {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  question      Question  @relation(fields: [questionId], references: [id])
  questionId    String    @db.ObjectId
  value         String
  form          Form      @relation(fields: [formId], references: [id])
  formId        String    @db.ObjectId
}

model Comment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String    @db.ObjectId
  template      Template  @relation(fields: [templateId], references: [id])
  templateId    String    @db.ObjectId
}

model Like {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  template      Template  @relation(fields: [templateId], references: [id])
  templateId    String    @db.ObjectId
}

model Tag {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String    @unique
  templates     TagToTemplate[]
}

model TagToTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  template    Template @relation(fields: [templateId], references: [id])
  templateId  String   @db.ObjectId
  tag         Tag      @relation(fields: [tagId], references: [id])
  tagId       String   @db.ObjectId
}

enum Role {
  ADMIN
  USER
}

enum QuestionType {
  SHORT_TEXT
  LONG_TEXT
  INTEGER
  CHECKBOX
}

// model Product {
//   id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   image String?
//   title String
//   price Float
//   category String 
//   description String?
//   createdAt DateTime @default(now())
// }

// model User {
//   id      String   @id @default(auto()) @map("_id") @db.ObjectId
//   email   String   @unique
//   password  String
//   role      Role     @default(USER)
//   name    String?
//   createdAt DateTime @default(now())

//   @@map("users")
// }

// enum Role {
//   USER
//   ADMIN
// }

// model Comment {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   comment String
//   post    Post   @relation(fields: [postId], references: [id])
//   postId  String @db.ObjectId
// }

// // Address is an embedded document
// type Address {
//   street String
//   city   String
//   state  String
//   zip    String
// }